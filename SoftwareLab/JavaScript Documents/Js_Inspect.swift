import SwiftUI

struct Js_Inspect: View {
    var body: some View {
        ScrollView {
            VStack(spacing: 30) {
                // BaÅŸlÄ±k
                VStack(spacing: 10) {
                    Text("Neler Ã–ÄŸreneceÄŸiz?")
                        .font(.largeTitle)
                        .fontWeight(.bold)
                        .foregroundColor(Color.blue)
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .padding(.horizontal)

                    Text("Hayalinizdeki web projelerini yapabilmek iÃ§in ihtiyacÄ±nÄ±z olan tÃ¼m temel JavaScript bilgilerini Ã¶ÄŸreneceksiniz! Bu kursla, sÄ±fÄ±rdan baÅŸlayarak deÄŸiÅŸkenler, fonksiyonlar, diziler, DOM manipÃ¼lasyonu ve asenkron JavaScript gibi temel konularÄ± kolayca kavrayacak, interaktif web uygulamalarÄ± geliÅŸtirebileceksiniz.ðŸš€\n\nNeden Bu Kurs?\n\n- HÄ±zlÄ±ca projeler yaparak Ã¶ÄŸrenin.\n- Temel JavaScript bilgileriyle gÃ¼Ã§lÃ¼ bir altyapÄ± oluÅŸturun.\n- Pratik Ã¶rneklerle hemen baÅŸlayÄ±n!\n\nHazÄ±r mÄ±sÄ±nÄ±z? Hadi, JavaScript dÃ¼nyasÄ±na adÄ±m atÄ±n ve web geliÅŸtirme yolculuÄŸunuzda bir adÄ±m Ã¶ne geÃ§in! ðŸŒŸ")
                        .font(.body)
                        .foregroundColor(.black)
                        .padding()
                        .background(Color.blue.opacity(0.05))
                        .cornerRadius(12)
                        .padding(.horizontal)
                }

                // BÃ¶lÃ¼mler (Accordion YapÄ±)
                VStack(spacing: 20) {
                    Js_AccordionView(title: "JavaScript'e GiriÅŸ", items: [
                        "JavaScript Nedir?",
                        "\"Hello World\" Kodu"
                    ])

                    Js_AccordionView(title: "DeÄŸiÅŸkenler ve Veri TÃ¼rleri", items: [
                        "`var`, `let`, `const`",
                        "SayÄ±lar, Stringler, Boolean"
                    ])

                    Js_AccordionView(title: "OperatÃ¶rler", items: [
                        "Aritmetik, KarÅŸÄ±laÅŸtÄ±rma ve MantÄ±ksal OperatÃ¶rler"
                    ])

                    Js_AccordionView(title: "KoÅŸul Ä°fadeleri", items: [
                        "`if`, `else`, `switch`"
                    ])

                    Js_AccordionView(title: "DÃ¶ngÃ¼ler", items: [
                        "`for`, `while`"
                    ])

                    Js_AccordionView(title: "Fonksiyonlar", items: [
                        "Fonksiyon TanÄ±mlama ve Kullanma"
                    ])

                    Js_AccordionView(title: "Diziler (Arrays)", items: [
                        "Dizi TanÄ±mlama, Elemanlara EriÅŸim"
                    ])

                    Js_AccordionView(title: "Nesneler (Objects)", items: [
                        "Nesne TanÄ±mlama ve Ã–zelliklere EriÅŸim"
                    ])

                    Js_AccordionView(title: "DOM ManipÃ¼lasyonu", items: [
                        "HTML ElemanlarÄ±na EriÅŸim ve DeÄŸiÅŸtirme"
                    ])

                    Js_AccordionView(title: "Olaylar (Events)", items: [
                        "`click`, `mouseover`, vb. Olay Dinleyicileri"
                    ])

                    Js_AccordionView(title: "Temel Hata YÃ¶netimi", items: [
                        "`try...catch` ile Hata Yakalama"
                    ])

                    Js_AccordionView(title: "Asenkron JavaScript", items: [
                        "`setTimeout()`, `setInterval()`"
                    ])

                    Js_AccordionView(title: "JSON", items: [
                        "JSON Verisi ile Ã‡alÄ±ÅŸma (`JSON.parse()`, `JSON.stringify()`)"])
                }
                .padding(.horizontal)

                Spacer()
            }
            .padding(.top)
        }
    }
}

struct Js_AccordionView: View {
    let title: String
    let items: [String]

    @State private var isExpanded: Bool = false

    var body: some View {
        VStack(alignment: .leading, spacing: 10) {
            Button(action: {
                withAnimation {
                    isExpanded.toggle()
                }
            }) {
                HStack {
                    Text(title)
                        .font(.headline)
                        .fontWeight(.semibold)
                        .foregroundColor(.black)
                    Spacer()
                    Image(systemName: isExpanded ? "chevron.up" : "chevron.down")
                        .foregroundColor(.gray)
                }
            }
            .padding()
            .background(Color.blue.opacity(0.1))
            .cornerRadius(12)

            if isExpanded {
                VStack(alignment: .leading, spacing: 12) {
                    ForEach(items, id: \ .self) { item in
                        Text("â€¢ " + item)
                            .font(.body)
                            .foregroundColor(.black)
                            .padding(.leading, 5)
                    }
                }
                .padding(12)
                .cornerRadius(12)
                .shadow(color: Color.gray.opacity(0.2), radius: 8, x: 0, y: 2)
            }
        }
        .background(Color.gray.opacity(0.05))
        .cornerRadius(12)
    }
}

struct Js_Inspect_Previews: PreviewProvider {
    static var previews: some View {
        Js_Inspect()
    }
}

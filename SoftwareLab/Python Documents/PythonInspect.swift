import SwiftUI

struct PythonInspect: View {
    var body: some View {
        ScrollView {
            VStack(spacing: 30) {
                // BaÅŸlÄ±k
                VStack(spacing: 10) {
                    Text("Neler Ã–ÄŸreneceÄŸiz?")
                        .font(.largeTitle)
                        .fontWeight(.bold)
                        .foregroundColor(Color.blue)
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .padding(.horizontal)

                    Text("Hayalinizdeki projeleri geliÅŸtirmek iÃ§in ihtiyaÃ§ duyduÄŸunuz temel Python bilgilerini bu kursta Ã¶ÄŸreneceksiniz! SÄ±fÄ±rdan baÅŸlayarak deÄŸiÅŸkenler, fonksiyonlar, diziler, koÅŸul ifadeleri ve dÃ¶ngÃ¼ler gibi temel konularÄ± Ã¶ÄŸrenip, Python ile gÃ¼Ã§lÃ¼ projeler yapmaya baÅŸlayacaksÄ±nÄ±z.\n\nNeden Bu Kurs?\n\n- Pratik Ã¶rneklerle Ã¶ÄŸrenin, hemen projelere baÅŸlayÄ±n.\n- Pythonâ€™un temellerini kolayca kavrayÄ±n.\n- Web geliÅŸtirme, veri analizi ve daha fazlasÄ± iÃ§in gÃ¼Ã§lÃ¼ bir altyapÄ± kazanÄ±n.\n\nHazÄ±r mÄ±sÄ±nÄ±z? Python dÃ¼nyasÄ±na adÄ±m atÄ±n ve programlama yolculuÄŸunuzda bir adÄ±m Ã¶ne geÃ§in! ðŸŒŸ")
                        .font(.body)
                        .foregroundColor(.black)
                        .padding()
                        .background(Color.blue.opacity(0.05))
                        .cornerRadius(12)
                        .padding(.horizontal)
                }

                // BÃ¶lÃ¼mler (Accordion YapÄ±)
                VStack(spacing: 20) {
                    Py_AccordionView(title: "Python'a GiriÅŸ", items: [
                        "Python Nedir? (Temel TanÄ±m)",
                        "Python ile \"Hello World\" Kodu",
                        "Python Kurulumu ve Ã‡alÄ±ÅŸtÄ±rma OrtamÄ±"
                    ])

                    Py_AccordionView(title: "DeÄŸiÅŸkenler ve Veri TÃ¼rleri", items: [
                        "DeÄŸiÅŸken TanÄ±mlama",
                        "SayÄ±lar (int, float)",
                        "Metinler (Strings)",
                        "Boolean (True/False)",
                        "Tip DÃ¶nÃ¼ÅŸÃ¼mÃ¼ (Type Conversion)"
                    ])

                    Py_AccordionView(title: "OperatÃ¶rler", items: [
                        "Aritmetik OperatÃ¶rler (+, -, *, /)",
                        "KarÅŸÄ±laÅŸtÄ±rma OperatÃ¶rleri (==, !=, <, >)",
                        "MantÄ±ksal OperatÃ¶rler (and, or, not)"
                    ])

                    Py_AccordionView(title: "KoÅŸul Ä°fadeleri (Conditionals)", items: [
                        "if, else, elif KullanÄ±mÄ±",
                        "MantÄ±ksal KoÅŸullar ile Karar Verme"
                    ])

                    Py_AccordionView(title: "DÃ¶ngÃ¼ler (Loops)", items: [
                        "for DÃ¶ngÃ¼sÃ¼",
                        "while DÃ¶ngÃ¼sÃ¼",
                        "break, continue ve else DÃ¶ngÃ¼leri"
                    ])

                    Py_AccordionView(title: "Fonksiyonlar", items: [
                        "Fonksiyon TanÄ±mlama ve Ã‡aÄŸÄ±rma",
                        "Parametreler ve Geri DÃ¶nÃ¼ÅŸ DeÄŸerleri",
                        "Lambda FonksiyonlarÄ± (KÄ±sa Fonksiyonlar)"
                    ])

                    Py_AccordionView(title: "Veri YapÄ±larÄ±", items: [
                        "Listeler (Lists)",
                        "Demetler (Tuples)",
                        "SÃ¶zlÃ¼kler (Dictionaries)",
                        "KÃ¼meler (Sets)"
                    ])

                    Py_AccordionView(title: "Diziler ve Koleksiyonlar", items: [
                        "Listelerde Eleman Ä°ÅŸlemleri (Ekleme, Silme, Arama)",
                        "Listelerde Slicing ve Indexing",
                        "range() Fonksiyonu ile Liste Ãœzerinde DÃ¶ngÃ¼ler"
                    ])

                    Py_AccordionView(title: "Dosya Ä°ÅŸlemleri", items: [
                        "Dosya AÃ§ma, Okuma ve Yazma",
                        "Dosya Kapatma ve YÃ¶netme"
                    ])

                    Py_AccordionView(title: "Hata YÃ¶netimi (Error Handling)", items: [
                        "try, except, finally BloklarÄ±",
                        "Hatalarla BaÅŸ Etme"
                    ])

                    Py_AccordionView(title: "ModÃ¼ller ve KÃ¼tÃ¼phaneler", items: [
                        "Python ModÃ¼lleri Nedir? NasÄ±l KullanÄ±lÄ±r?",
                        "Python Standart KÃ¼tÃ¼phaneleri",
                        "Ã–rnek ModÃ¼ller: math, random, time"
                    ])

                    Py_AccordionView(title: "Temel Veri Analizi", items: [
                        "Python ile Basit Hesaplamalar",
                        "Veri ManipÃ¼lasyonu: SayÄ±lar, Listeler ve Diziler"
                    ])
                }
                .padding(.horizontal)

                Spacer()
            }
            .padding(.top)
        }
    }
}

struct Py_AccordionView: View {
    let title: String
    let items: [String]

    @State private var isExpanded: Bool = false

    var body: some View {
        VStack(alignment: .leading, spacing: 10) {
            Button(action: {
                withAnimation {
                    isExpanded.toggle()
                }
            }) {
                HStack {
                    Text(title)
                        .font(.headline)
                        .fontWeight(.semibold)
                        .foregroundColor(.black)
                    Spacer()
                    Image(systemName: isExpanded ? "chevron.up" : "chevron.down")
                        .foregroundColor(.gray)
                }
            }
            .padding()
            .background(Color.blue.opacity(0.1))
            .cornerRadius(12)

            if isExpanded {
                VStack(alignment: .leading, spacing: 12) {
                    ForEach(items, id: \ .self) { item in
                        Text("â€¢ " + item)
                            .font(.body)
                            .foregroundColor(.black)
                            .padding(.leading, 5)
                    }
                }
                .padding(12)
                .cornerRadius(12)
                .shadow(color: Color.gray.opacity(0.2), radius: 8, x: 0, y: 2)
            }
        }
        .background(Color.gray.opacity(0.05))
        .cornerRadius(12)
    }
}

struct PyhonInspect_Previews: PreviewProvider {
    static var previews: some View {
        PythonInspect()
    }
}

